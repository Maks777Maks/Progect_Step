//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calc_WPF_.CalcService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.ICalcStandart")]
    public interface ICalcStandart {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetPlus", ReplyAction="http://tempuri.org/ICalcStandart/GetPlusResponse")]
        double GetPlus(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetPlus", ReplyAction="http://tempuri.org/ICalcStandart/GetPlusResponse")]
        System.Threading.Tasks.Task<double> GetPlusAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetMinus", ReplyAction="http://tempuri.org/ICalcStandart/GetMinusResponse")]
        double GetMinus(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetMinus", ReplyAction="http://tempuri.org/ICalcStandart/GetMinusResponse")]
        System.Threading.Tasks.Task<double> GetMinusAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetMulti", ReplyAction="http://tempuri.org/ICalcStandart/GetMultiResponse")]
        double GetMulti(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetMulti", ReplyAction="http://tempuri.org/ICalcStandart/GetMultiResponse")]
        System.Threading.Tasks.Task<double> GetMultiAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetDivision", ReplyAction="http://tempuri.org/ICalcStandart/GetDivisionResponse")]
        double GetDivision(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcStandart/GetDivision", ReplyAction="http://tempuri.org/ICalcStandart/GetDivisionResponse")]
        System.Threading.Tasks.Task<double> GetDivisionAsync(double a, double b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcStandartChannel : Calc_WPF_.CalcService.ICalcStandart, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcStandartClient : System.ServiceModel.ClientBase<Calc_WPF_.CalcService.ICalcStandart>, Calc_WPF_.CalcService.ICalcStandart {
        
        public CalcStandartClient() {
        }
        
        public CalcStandartClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcStandartClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcStandartClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcStandartClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double GetPlus(double a, double b) {
            return base.Channel.GetPlus(a, b);
        }
        
        public System.Threading.Tasks.Task<double> GetPlusAsync(double a, double b) {
            return base.Channel.GetPlusAsync(a, b);
        }
        
        public double GetMinus(double a, double b) {
            return base.Channel.GetMinus(a, b);
        }
        
        public System.Threading.Tasks.Task<double> GetMinusAsync(double a, double b) {
            return base.Channel.GetMinusAsync(a, b);
        }
        
        public double GetMulti(double a, double b) {
            return base.Channel.GetMulti(a, b);
        }
        
        public System.Threading.Tasks.Task<double> GetMultiAsync(double a, double b) {
            return base.Channel.GetMultiAsync(a, b);
        }
        
        public double GetDivision(double a, double b) {
            return base.Channel.GetDivision(a, b);
        }
        
        public System.Threading.Tasks.Task<double> GetDivisionAsync(double a, double b) {
            return base.Channel.GetDivisionAsync(a, b);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.ICalcAdvansed")]
    public interface ICalcAdvansed {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcAdvansed/Factorial", ReplyAction="http://tempuri.org/ICalcAdvansed/FactorialResponse")]
        int Factorial(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcAdvansed/Factorial", ReplyAction="http://tempuri.org/ICalcAdvansed/FactorialResponse")]
        System.Threading.Tasks.Task<int> FactorialAsync(int a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcAdvansed/Pow", ReplyAction="http://tempuri.org/ICalcAdvansed/PowResponse")]
        double Pow(double a, int b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcAdvansed/Pow", ReplyAction="http://tempuri.org/ICalcAdvansed/PowResponse")]
        System.Threading.Tasks.Task<double> PowAsync(double a, int b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcAdvansedChannel : Calc_WPF_.CalcService.ICalcAdvansed, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcAdvansedClient : System.ServiceModel.ClientBase<Calc_WPF_.CalcService.ICalcAdvansed>, Calc_WPF_.CalcService.ICalcAdvansed {
        
        public CalcAdvansedClient() {
        }
        
        public CalcAdvansedClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcAdvansedClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcAdvansedClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcAdvansedClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Factorial(int a) {
            return base.Channel.Factorial(a);
        }
        
        public System.Threading.Tasks.Task<int> FactorialAsync(int a) {
            return base.Channel.FactorialAsync(a);
        }
        
        public double Pow(double a, int b) {
            return base.Channel.Pow(a, b);
        }
        
        public System.Threading.Tasks.Task<double> PowAsync(double a, int b) {
            return base.Channel.PowAsync(a, b);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.ICalcScience")]
    public interface ICalcScience {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcScience/Discriminant", ReplyAction="http://tempuri.org/ICalcScience/DiscriminantResponse")]
        double[] Discriminant(double a, double b, double c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalcScience/Discriminant", ReplyAction="http://tempuri.org/ICalcScience/DiscriminantResponse")]
        System.Threading.Tasks.Task<double[]> DiscriminantAsync(double a, double b, double c);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalcScienceChannel : Calc_WPF_.CalcService.ICalcScience, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalcScienceClient : System.ServiceModel.ClientBase<Calc_WPF_.CalcService.ICalcScience>, Calc_WPF_.CalcService.ICalcScience {
        
        public CalcScienceClient() {
        }
        
        public CalcScienceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalcScienceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcScienceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalcScienceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double[] Discriminant(double a, double b, double c) {
            return base.Channel.Discriminant(a, b, c);
        }
        
        public System.Threading.Tasks.Task<double[]> DiscriminantAsync(double a, double b, double c) {
            return base.Channel.DiscriminantAsync(a, b, c);
        }
    }
}
