//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UI.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Student", Namespace="http://schemas.datacontract.org/2004/07/DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Student : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UI.ServiceReference1.Mark[] marksField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UI.ServiceReference1.Mark[] marks {
            get {
                return this.marksField;
            }
            set {
                if ((object.ReferenceEquals(this.marksField, value) != true)) {
                    this.marksField = value;
                    this.RaisePropertyChanged("marks");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Mark", Namespace="http://schemas.datacontract.org/2004/07/DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Mark : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int markField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UI.ServiceReference1.Student studentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UI.ServiceReference1.Subject subjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int mark {
            get {
                return this.markField;
            }
            set {
                if ((this.markField.Equals(value) != true)) {
                    this.markField = value;
                    this.RaisePropertyChanged("mark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UI.ServiceReference1.Student student {
            get {
                return this.studentField;
            }
            set {
                if ((object.ReferenceEquals(this.studentField, value) != true)) {
                    this.studentField = value;
                    this.RaisePropertyChanged("student");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UI.ServiceReference1.Subject subject {
            get {
                return this.subjectField;
            }
            set {
                if ((object.ReferenceEquals(this.subjectField, value) != true)) {
                    this.subjectField = value;
                    this.RaisePropertyChanged("subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Subject", Namespace="http://schemas.datacontract.org/2004/07/DAL", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Subject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UI.ServiceReference1.Mark[] marksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UI.ServiceReference1.Mark[] marks {
            get {
                return this.marksField;
            }
            set {
                if ((object.ReferenceEquals(this.marksField, value) != true)) {
                    this.marksField = value;
                    this.RaisePropertyChanged("marks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime time {
            get {
                return this.timeField;
            }
            set {
                if ((this.timeField.Equals(value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IStudent")]
    public interface IStudent {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudent/AddStudent", ReplyAction="http://tempuri.org/IStudent/AddStudentResponse")]
        void AddStudent(UI.ServiceReference1.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudent/AddStudent", ReplyAction="http://tempuri.org/IStudent/AddStudentResponse")]
        System.Threading.Tasks.Task AddStudentAsync(UI.ServiceReference1.Student student);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudent/GetStudent", ReplyAction="http://tempuri.org/IStudent/GetStudentResponse")]
        UI.ServiceReference1.Student[] GetStudent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStudent/GetStudent", ReplyAction="http://tempuri.org/IStudent/GetStudentResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.Student[]> GetStudentAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStudentChannel : UI.ServiceReference1.IStudent, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StudentClient : System.ServiceModel.ClientBase<UI.ServiceReference1.IStudent>, UI.ServiceReference1.IStudent {
        
        public StudentClient() {
        }
        
        public StudentClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StudentClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StudentClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddStudent(UI.ServiceReference1.Student student) {
            base.Channel.AddStudent(student);
        }
        
        public System.Threading.Tasks.Task AddStudentAsync(UI.ServiceReference1.Student student) {
            return base.Channel.AddStudentAsync(student);
        }
        
        public UI.ServiceReference1.Student[] GetStudent() {
            return base.Channel.GetStudent();
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.Student[]> GetStudentAsync() {
            return base.Channel.GetStudentAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMark")]
    public interface IMark {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMark/AddMark", ReplyAction="http://tempuri.org/IMark/AddMarkResponse")]
        void AddMark(int mark, UI.ServiceReference1.Student student, UI.ServiceReference1.Subject sub);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMark/AddMark", ReplyAction="http://tempuri.org/IMark/AddMarkResponse")]
        System.Threading.Tasks.Task AddMarkAsync(int mark, UI.ServiceReference1.Student student, UI.ServiceReference1.Subject sub);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMark/GetMark", ReplyAction="http://tempuri.org/IMark/GetMarkResponse")]
        UI.ServiceReference1.Mark[] GetMark();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMark/GetMark", ReplyAction="http://tempuri.org/IMark/GetMarkResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.Mark[]> GetMarkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMark/GetMarkByStudent", ReplyAction="http://tempuri.org/IMark/GetMarkByStudentResponse")]
        UI.ServiceReference1.Mark[] GetMarkByStudent(UI.ServiceReference1.Student st, UI.ServiceReference1.Subject sub);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMark/GetMarkByStudent", ReplyAction="http://tempuri.org/IMark/GetMarkByStudentResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.Mark[]> GetMarkByStudentAsync(UI.ServiceReference1.Student st, UI.ServiceReference1.Subject sub);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMarkChannel : UI.ServiceReference1.IMark, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MarkClient : System.ServiceModel.ClientBase<UI.ServiceReference1.IMark>, UI.ServiceReference1.IMark {
        
        public MarkClient() {
        }
        
        public MarkClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MarkClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarkClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MarkClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddMark(int mark, UI.ServiceReference1.Student student, UI.ServiceReference1.Subject sub) {
            base.Channel.AddMark(mark, student, sub);
        }
        
        public System.Threading.Tasks.Task AddMarkAsync(int mark, UI.ServiceReference1.Student student, UI.ServiceReference1.Subject sub) {
            return base.Channel.AddMarkAsync(mark, student, sub);
        }
        
        public UI.ServiceReference1.Mark[] GetMark() {
            return base.Channel.GetMark();
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.Mark[]> GetMarkAsync() {
            return base.Channel.GetMarkAsync();
        }
        
        public UI.ServiceReference1.Mark[] GetMarkByStudent(UI.ServiceReference1.Student st, UI.ServiceReference1.Subject sub) {
            return base.Channel.GetMarkByStudent(st, sub);
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.Mark[]> GetMarkByStudentAsync(UI.ServiceReference1.Student st, UI.ServiceReference1.Subject sub) {
            return base.Channel.GetMarkByStudentAsync(st, sub);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISubject")]
    public interface ISubject {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubject/AddSubject", ReplyAction="http://tempuri.org/ISubject/AddSubjectResponse")]
        void AddSubject(UI.ServiceReference1.Subject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubject/AddSubject", ReplyAction="http://tempuri.org/ISubject/AddSubjectResponse")]
        System.Threading.Tasks.Task AddSubjectAsync(UI.ServiceReference1.Subject subject);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubject/GetSubject", ReplyAction="http://tempuri.org/ISubject/GetSubjectResponse")]
        UI.ServiceReference1.Subject[] GetSubject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISubject/GetSubject", ReplyAction="http://tempuri.org/ISubject/GetSubjectResponse")]
        System.Threading.Tasks.Task<UI.ServiceReference1.Subject[]> GetSubjectAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISubjectChannel : UI.ServiceReference1.ISubject, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SubjectClient : System.ServiceModel.ClientBase<UI.ServiceReference1.ISubject>, UI.ServiceReference1.ISubject {
        
        public SubjectClient() {
        }
        
        public SubjectClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SubjectClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubjectClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SubjectClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddSubject(UI.ServiceReference1.Subject subject) {
            base.Channel.AddSubject(subject);
        }
        
        public System.Threading.Tasks.Task AddSubjectAsync(UI.ServiceReference1.Subject subject) {
            return base.Channel.AddSubjectAsync(subject);
        }
        
        public UI.ServiceReference1.Subject[] GetSubject() {
            return base.Channel.GetSubject();
        }
        
        public System.Threading.Tasks.Task<UI.ServiceReference1.Subject[]> GetSubjectAsync() {
            return base.Channel.GetSubjectAsync();
        }
    }
}
